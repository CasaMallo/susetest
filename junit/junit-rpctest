#!/usr/bin/perl
#
# This will post-process the output of the tirpc test utility and
# generate JUnit XML from it.
#
# Note, this will expect a non-default output formatting, you need
# to invoke rpctest as
#
#  ./rpctest -T libtirpc
#
# Copyright (C) 2014 Olaf Kirch <okir@suse.de>
#

use JUnit;

$JUnit::trace = 1;

my $opt_filename = "report.xml";
my $opt_merge = 0;

my $report;

if ($opt_merge) {
	$report = JUnit::loadReport($opt_filename);
} else {
	print "create report\n";
	$report = Report->new($opt_filename);
}

my $test_name;
my $test_desc;
my $test_result;

$report->package('tirpc');

while (<>) {
	$report->systemout($_);

	# TESTBEGIN tirpc.netpath (Verify netpath functions)
	if (/TESTBEGIN\s+(\S+)\s+\((.*)\)/o) {
		$test_name = $1;
		$test_desc = $2;
		next;
	}

	$test_output .= $_;

	# TESTRESULT tirpc.netpath.testcase0: SUCCESS
	if (/TESTRESULT\s+(\S+):\s+(\S+)\s*(.*)/o) {
		next unless ($test_name eq $1);

		my $result = $2;
		my $message = $3;
		my $tc;

		if ($result eq 'SUCCESS') {
			$tc = $report->addResult($test_name, $test_desc, $JUnit::SUCCESS);
		} elsif ($result eq 'FAILED') {
			$tc = $report->addResult($test_name, $test_desc, $JUnit::FAILED);
			# if the message if of the form "(bla bla)" remove the outer brackets
			$message =~ s:^\((.*)\)$:\1:o;
			$tc->message($message);
		} elsif ($result eq 'WARN') {
			# We print this when ignoring a failed test
		} else {
			print STDERR "Unknown test status $result for test $test_name\n";
		}
		$test_name = undef;
	}

}

$report->save();
